{"version":3,"sources":["bacnet-command.js"],"names":["module","exports","RED","bacnetCore","require","BACnet","_","nodes","typelistEntry","config","createNode","this","name","commandType","timeDuration","parseInt","enableDisable","EnableDisable","ENABLE","deviceState","ReinitializedState","COLDSTART","isUtc","BACnetCommand","lowLimit","highLimit","server","credentials","node","deviceIPAddress","device","deviceAddress","msg","status","connector","fill","error","Error","internalDebugLog","payload","options","maxAdpu","password","invokeId","MaxSegmentsAccepted","SEGMENTS_65","MaxApduLengthAccepted","OCTETS_1476","client","deviceCommunicationControl","err","translatedError","translateErrorMessage","value","input","reinitializeDevice","timeSyncUTC","syncDateTime","Date","whoIsExplicit","devices","send","type","httpAdmin","get","auth","needsPermission","req","res","_step","typeValue","typeList","_iterator","_createForOfIteratorHelper","toArray","invert","s","n","done","resultTypeList","push","label","e","f","json","invertedTypeList","_step2","_iterator2"],"mappings":"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","file":"../bacnet-command.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n  const BACnet = require('node-bacnet')\n  const _ = require('underscore')\n\n  function BACnetCommand (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.commandType = config.commandType\n    this.timeDuration = parseInt(config.timeDuration) || 0\n    this.enableDisable = config.enableDisable || BACnet.enum.EnableDisable.ENABLE\n    this.deviceState = config.deviceState || BACnet.enum.ReinitializedState.COLDSTART\n    this.isUtc = config.isUtc || true\n    this.lowLimit = config.lowLimit || null\n    this.highLimit = config.highLimit || null\n    this.credentials = config.credentials\n\n    this.device = RED.nodes.getNode(config.device)\n    this.deviceIPAddress = this.device.deviceAddress || '127.0.0.1'\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    const node = this\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Read'), msg)\n      }\n\n      bacnetCore.internalDebugLog('Command')\n\n      const commandType = msg.payload.commandType || node.commandType\n      let options = msg.payload.options || null\n\n      if (!options) {\n        options = {\n          maxSegments: BACnet.enum.MaxSegmentsAccepted.SEGMENTS_65,\n          maxAdpu: BACnet.enum.MaxApduLengthAccepted.OCTETS_1476,\n          invokeId: null,\n          password: (node.credentials) ? node.credentials.password : null\n        }\n      } else {\n        if (!msg.payload.options.password) {\n          msg.payload.options.password = node.credentials.password\n        }\n      }\n\n      switch (commandType) {\n        case 'deviceCommunicationControl':\n          node.connector.client.deviceCommunicationControl(\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            msg.payload.timeDuration || node.timeDuration,\n            msg.payload.enableDisable || node.enableDisable,\n            options,\n            function (err, value) {\n              if (err) {\n                const translatedError = bacnetCore.translateErrorMessage(err)\n                bacnetCore.internalDebugLog(translatedError)\n                node.error(translatedError, msg)\n              } else {\n                bacnetCore.internalDebugLog('value: ', value)\n                msg.input = msg.payload\n                msg.payload = value\n              }\n            })\n          break\n\n        case 'reinitializeDevice':\n          node.connector.client.reinitializeDevice(\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            msg.payload.deviceState || node.deviceState,\n            options,\n            function (err, value) {\n              if (err) {\n                const translatedError = bacnetCore.translateErrorMessage(err)\n                bacnetCore.internalDebugLog(translatedError)\n                node.error(translatedError, msg)\n              } else {\n                bacnetCore.internalDebugLog('value: ', value)\n                msg.input = msg.payload\n                msg.payload = value\n              }\n            })\n          break\n\n        case 'timeSync':\n          if (msg.payload.isUtc || node.isUtc) {\n            node.connector.client.timeSyncUTC(\n              msg.payload.deviceIPAddress || node.deviceIPAddress,\n              msg.payload.syncDateTime || new Date())\n          } else {\n            node.connector.client.timeSync(\n              msg.payload.deviceIPAddress || node.deviceIPAddress,\n              msg.payload.syncDateTime || new Date())\n          }\n          break\n\n        case 'whoIsExplicit':\n          node.connector.whoIsExplicit(\n            msg.payload.lowLimit || node.lowLimit,\n            msg.payload.highLimit || node.highLimit,\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            function () {\n              msg.input = msg.payload\n              msg.payload = node.connector.devices\n              node.send(msg)\n            })\n          break\n\n        case 'whoIs':\n          node.connector.whoIs(\n            function () {\n              msg.input = msg.payload\n              msg.payload = node.connector.devices\n              node.send(msg)\n            })\n          break\n\n        default:\n          bacnetCore.internalDebugLog('Unknown Command Type Selected ' + commandType)\n      }\n\n      msg.devices = node.connector.devices\n\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Command', BACnetCommand, {\n    credentials: {\n      password: { type: 'password' }\n    }\n  })\n\n  RED.httpAdmin.get('/bacnet/BacnetEnableDisable', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    const typeList = BACnet.enum.EnableDisable\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/BacnetReinitializedStates', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    const typeList = BACnet.enum.ReinitializedState\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}