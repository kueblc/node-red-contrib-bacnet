{"version":3,"sources":["bacnet-command.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","i","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","s","F","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","module","exports","bacnetCore","BACnet","RED","nodes","typeList","config","require","this","createNode","commandType","timeDuration","parseInt","enableDisable","EnableDisable","ENABLE","ReinitializedState","deviceState","isUtc","lowLimit","highLimit","device","getNode","deviceIPAddress","deviceAddress","node","server","text","fill","shape","on","msg","connector","error","Error","payload","options","maxAdpu","password","credentials","SEGMENTS_65","MaxApduLengthAccepted","OCTETS_1476","invokeId","translatedError","internalDebugLog","translateErrorMessage","client","reinitializeDevice","timeSync","whoIsExplicit","input","send","syncDateTime","Date","registerType","devices","httpAdmin","invertedTypeList","typelistEntry","_iterator","_step","typeValue","resultTypeList","get","auth","needsPermission","req","res","_step2","_","invert","push","label","json","_iterator2","toArray"],"mappings":"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","file":"../bacnet-command.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n  const BACnet = require('node-bacnet')\n  const _ = require('underscore')\n\n  function BACnetCommand (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.commandType = config.commandType\n    this.timeDuration = parseInt(config.timeDuration) || 0\n    this.enableDisable = config.enableDisable || BACnet.enum.EnableDisable.ENABLE\n    this.deviceState = config.deviceState || BACnet.enum.ReinitializedState.COLDSTART\n    this.isUtc = config.isUtc || true\n    this.lowLimit = config.lowLimit || null\n    this.highLimit = config.highLimit || null\n    this.credentials = config.credentials\n\n    if (config.device) {\n      this.device = RED.nodes.getNode(config.device)\n      this.deviceIPAddress = this.device.deviceAddress\n    } else {\n      this.deviceIPAddress = '127.0.0.1'\n    }\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    const node = this\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Read'), msg)\n      }\n\n      bacnetCore.internalDebugLog('Command')\n\n      const commandType = msg.payload.commandType || node.commandType\n      let options = msg.payload.options || null\n\n      if (!options) {\n        options = {\n          maxSegments: BACnet.enum.MaxSegmentsAccepted.SEGMENTS_65,\n          maxAdpu: BACnet.enum.MaxApduLengthAccepted.OCTETS_1476,\n          invokeId: null,\n          password: (node.credentials) ? node.credentials.password : null\n        }\n      } else {\n        if (!msg.payload.options.password) {\n          msg.payload.options.password = node.credentials.password\n        }\n      }\n\n      switch (commandType) {\n        case 'deviceCommunicationControl':\n          node.connector.client.deviceCommunicationControl(\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            msg.payload.timeDuration || node.timeDuration,\n            msg.payload.enableDisable || node.enableDisable,\n            options,\n            function (err, value) {\n              if (err) {\n                const translatedError = bacnetCore.translateErrorMessage(err)\n                bacnetCore.internalDebugLog(translatedError)\n                node.error(translatedError, msg)\n              } else {\n                bacnetCore.internalDebugLog('value: ', value)\n                msg.input = msg.payload\n                msg.payload = value\n              }\n            })\n          break\n\n        case 'reinitializeDevice':\n          node.connector.client.reinitializeDevice(\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            msg.payload.deviceState || node.deviceState,\n            options,\n            function (err, value) {\n              if (err) {\n                const translatedError = bacnetCore.translateErrorMessage(err)\n                bacnetCore.internalDebugLog(translatedError)\n                node.error(translatedError, msg)\n              } else {\n                bacnetCore.internalDebugLog('value: ', value)\n                msg.input = msg.payload\n                msg.payload = value\n              }\n            })\n          break\n\n        case 'timeSync':\n          if (msg.payload.isUtc || node.isUtc) {\n            node.connector.client.timeSyncUTC(\n              msg.payload.deviceIPAddress || node.deviceIPAddress,\n              msg.payload.syncDateTime || new Date())\n          } else {\n            node.connector.client.timeSync(\n              msg.payload.deviceIPAddress || node.deviceIPAddress,\n              msg.payload.syncDateTime || new Date())\n          }\n          break\n\n        case 'whoIsExplicit':\n          node.connector.whoIsExplicit(\n            msg.payload.lowLimit || node.lowLimit,\n            msg.payload.highLimit || node.highLimit,\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            function () {\n              msg.input = msg.payload\n              msg.payload = node.connector.devices\n              node.send(msg)\n            })\n          break\n\n        case 'whoIs':\n          node.connector.whoIs(\n            function () {\n              msg.input = msg.payload\n              msg.payload = node.connector.devices\n              node.send(msg)\n            })\n          break\n\n        default:\n          bacnetCore.internalDebugLog('Unknown Command Type Selected ' + commandType)\n      }\n\n      msg.devices = node.connector.devices\n\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Command', BACnetCommand, {\n    credentials: {\n      password: { type: 'password' }\n    }\n  })\n\n  RED.httpAdmin.get('/bacnet/BacnetEnableDisable', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    const typeList = BACnet.enum.EnableDisable\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/BacnetReinitializedStates', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    const typeList = BACnet.enum.ReinitializedState\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}