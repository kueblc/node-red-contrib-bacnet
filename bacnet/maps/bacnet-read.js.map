{"version":3,"sources":["bacnet-read.js"],"names":["module","exports","RED","bacnetCore","require","nodes","registerType","createNode","name","config","this","propertyId","parseInt","multipleRead","instance","objectInstance","getNode","instanceAddress","device","deviceIPAddress","connector","node","status","text","server","on","error","fill","Error","shape","msg","options","type","objectType","properties","defaultRequestArray","objectId","internalDebugLog","payload","JSON","stringify","readPropertyMultiple","requestArray","translatedError","e","client","result","err","translateErrorMessage","input","readProperty","send"],"mappings":"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","file":"../bacnet-read.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n\n  function BACnetRead (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.objectType = parseInt(config.objectType)\n    this.propertyId = parseInt(config.propertyId)\n    this.multipleRead = config.multipleRead\n\n    if (config.instance) {\n      this.instance = RED.nodes.getNode(config.instance)\n      this.objectInstance = this.instance.instanceAddress\n    } else {\n      this.objectInstance = 0\n    }\n\n    if (config.device) {\n      this.device = RED.nodes.getNode(config.device)\n      this.deviceIPAddress = this.device.deviceAddress\n    } else {\n      this.deviceIPAddress = '127.0.0.1'\n    }\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    const node = this\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Read'), msg)\n        return\n      }\n\n      const options = msg.payload.options || {}\n\n      if (node.multipleRead) {\n        bacnetCore.internalDebugLog('Multiple Read')\n\n        const defaultRequestArray = [{\n          objectId: {\n            type: node.objectType,\n            instance: parseInt(node.objectInstance)\n          },\n          properties: [{ id: parseInt(node.propertyId) }]\n        }]\n\n        try {\n          bacnetCore.internalDebugLog('readProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('readProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('readPropertyMultiple default requestArray: ' + JSON.stringify(defaultRequestArray))\n          bacnetCore.internalDebugLog('readPropertyMultiple msg.payload.requestArray: ' + JSON.stringify(msg.payload.requestArray))\n          bacnetCore.internalDebugLog('readPropertyMultiple node.propertyId: ' + node.propertyId)\n          bacnetCore.internalDebugLog('readPropertyMultiple msg.payload.propertyId: ' + msg.payload.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('readPropertyMultiple error: ' + e)\n        }\n\n        node.connector.client.readPropertyMultiple(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.requestArray || defaultRequestArray,\n          options,\n          function (err, result) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = result\n              node.send(msg)\n            }\n          })\n      } else {\n        bacnetCore.internalDebugLog('Read')\n\n        const objectId = {\n          type: parseInt(node.objectType),\n          instance: parseInt(node.objectInstance)\n        }\n\n        try {\n          bacnetCore.internalDebugLog('readProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('readProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('readProperty default objectId: ' + JSON.stringify(objectId))\n          bacnetCore.internalDebugLog('readProperty msg.payload.objectId: ' + JSON.stringify(msg.payload.objectId))\n          bacnetCore.internalDebugLog('readProperty node.propertyId: ' + node.propertyId)\n          bacnetCore.internalDebugLog('readProperty msg.payload.propertyId: ' + msg.payload.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('readProperty error: ' + e)\n        }\n\n        node.connector.client.readProperty(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.objectId || objectId,\n          parseInt(msg.payload.propertyId) || parseInt(node.propertyId),\n          options,\n          function (err, result) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = result\n              node.send(msg)\n            }\n          })\n      }\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Read', BACnetRead)\n}\n"]}