{"version":3,"sources":["bacnet-read.js"],"names":["module","exports","RED","bacnetCore","require","nodes","registerType","config","createNode","this","objectType","parseInt","propertyId","multipleRead","instance","objectInstance","getNode","instanceAddress","device","deviceIPAddress","deviceAddress","node","server","text","fill","shape","on","msg","connector","options","payload","internalDebugLog","objectId","properties","JSON","stringify","defaultRequestArray","e","client","readPropertyMultiple","err","requestArray","translatedError","translateErrorMessage","input","result","send","type","error","Error"],"mappings":"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","file":"../bacnet-read.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n\n  function BACnetRead (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.objectType = parseInt(config.objectType)\n    this.propertyId = parseInt(config.propertyId)\n    this.multipleRead = config.multipleRead\n\n    if (config.instance) {\n      this.instance = RED.nodes.getNode(config.instance)\n      this.objectInstance = this.instance.instanceAddress\n    } else {\n      this.objectInstance = 0\n    }\n\n    if (config.device) {\n      this.device = RED.nodes.getNode(config.device)\n      this.deviceIPAddress = this.device.deviceAddress\n    } else {\n      this.deviceIPAddress = '127.0.0.1'\n    }\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    const node = this\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Read'), msg)\n        return\n      }\n\n      const options = msg.payload.options || {}\n\n      if (node.multipleRead) {\n        bacnetCore.internalDebugLog('Multiple Read')\n\n        const defaultRequestArray = [{\n          objectId: {\n            type: node.objectType,\n            instance: parseInt(node.objectInstance)\n          },\n          properties: [{ id: parseInt(node.propertyId) }]\n        }]\n\n        try {\n          bacnetCore.internalDebugLog('readProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('readProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('readPropertyMultiple default requestArray: ' + JSON.stringify(defaultRequestArray))\n          bacnetCore.internalDebugLog('readPropertyMultiple msg.payload.requestArray: ' + JSON.stringify(msg.payload.requestArray))\n          bacnetCore.internalDebugLog('readPropertyMultiple node.propertyId: ' + node.propertyId)\n          bacnetCore.internalDebugLog('readPropertyMultiple msg.payload.propertyId: ' + msg.payload.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('readPropertyMultiple error: ' + e)\n        }\n\n        node.connector.client.readPropertyMultiple(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.requestArray || defaultRequestArray,\n          options,\n          function (err, result) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = result\n              node.send(msg)\n            }\n          })\n      } else {\n        bacnetCore.internalDebugLog('Read')\n\n        const objectId = {\n          type: parseInt(node.objectType),\n          instance: parseInt(node.objectInstance)\n        }\n\n        try {\n          bacnetCore.internalDebugLog('readProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('readProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('readProperty default objectId: ' + JSON.stringify(objectId))\n          bacnetCore.internalDebugLog('readProperty msg.payload.objectId: ' + JSON.stringify(msg.payload.objectId))\n          bacnetCore.internalDebugLog('readProperty node.propertyId: ' + node.propertyId)\n          bacnetCore.internalDebugLog('readProperty msg.payload.propertyId: ' + msg.payload.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('readProperty error: ' + e)\n        }\n\n        node.connector.client.readProperty(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.objectId || objectId,\n          parseInt(msg.payload.propertyId) || parseInt(node.propertyId),\n          options,\n          function (err, result) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = result\n              node.send(msg)\n            }\n          })\n      }\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Read', BACnetRead)\n}\n"]}