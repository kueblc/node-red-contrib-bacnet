{"version":3,"sources":["core/bacnet-core.js"],"names":["de","biancoroyal","bacnet","core","internalDebugLog","require","detailDebugLog","specialDebugLog","errorCodeList","errorClassList","initCodeLists","listCodeEntry","_step","BACnet","ErrorCode","invertedErrorCodeList","_","toArray","invert","_iterator","_createForOfIteratorHelper","s","n","done","push","typeValue","label","err","e","f","sortBy","_step2","ErrorClass","_iterator2","invertedErrorClassList","listClassEntry","value","length","translateErrorMessage","errorClassMessage","message","messageParts","split","errorClassToString","errorCodeMessage","errorCodeToString","join","errorCodeId","listEntry","entry","_step3","_iterator3","parseInt","errorClassId","_step4","_iterator4","module","exports"],"mappings":"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","file":"../../core/bacnet-core.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nvar de = de || { biancoroyal: { bacnet: { core: {} } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.internalDebugLog = de.biancoroyal.bacnet.core.internalDebugLog || require('debug')('bacnet:nodered:core') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.detailDebugLog = de.biancoroyal.bacnet.core.detailDebugLog || require('debug')('bacnet:nodered:core:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.specialDebugLog = de.biancoroyal.bacnet.core.specialDebugLog || require('debug')('bacnet:nodered:core:special') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.errorCodeList = de.biancoroyal.bacnet.core.errorCodeList || [] // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.errorClassList = de.biancoroyal.bacnet.core.errorClassList || [] // eslint-disable-line no-use-before-define\n\nde.biancoroyal.bacnet.core.initCodeLists = function () {\n  const BACnet = require('node-bacnet')\n  const _ = require('underscore')\n\n  const errorCodeList = BACnet.enum.ErrorCode\n  const invertedErrorCodeList = _.toArray(_.invert(errorCodeList))\n  de.biancoroyal.bacnet.core.errorCodeList = []\n\n  let listCodeEntry\n  for (listCodeEntry of invertedErrorCodeList) {\n    de.biancoroyal.bacnet.core.errorCodeList.push({ typeValue: errorCodeList[listCodeEntry], label: listCodeEntry })\n  }\n  _.sortBy(de.biancoroyal.bacnet.core.errorCodeList, 'typeValue')\n\n  const errorClassList = BACnet.enum.ErrorClass\n  const invertedErrorClassList = _.toArray(_.invert(errorClassList))\n  de.biancoroyal.bacnet.core.errorClassList = []\n\n  let listClassEntry\n  for (listClassEntry of invertedErrorClassList) {\n    de.biancoroyal.bacnet.core.errorClassList.push({ typeValue: errorClassList[listClassEntry], label: listClassEntry })\n  }\n  _.sortBy(de.biancoroyal.bacnet.core.errorClassList, 'typeValue')\n\n  de.biancoroyal.bacnet.core.internalDebugLog('List init done with ' +\n    de.biancoroyal.bacnet.core.errorClassList.length + ' class errors and ' +\n    de.biancoroyal.bacnet.core.errorCodeList.length + ' code errors')\n}\n\nde.biancoroyal.bacnet.core.translateErrorMessage = function (err) {\n  const message = err.message\n  const messageParts = message.split('-')\n  if (messageParts.length === 3) {\n    const errorClassMessage = messageParts[1].split(':')\n    const errorCodeMessage = messageParts[2].split(':')\n\n    de.biancoroyal.bacnet.core.internalDebugLog(errorClassMessage)\n    de.biancoroyal.bacnet.core.internalDebugLog(errorCodeMessage)\n\n    errorClassMessage[1] = de.biancoroyal.bacnet.core.errorClassToString(errorClassMessage[1])\n    errorCodeMessage[1] = de.biancoroyal.bacnet.core.errorCodeToString(errorCodeMessage[1])\n\n    err.message = message + ' ' + errorClassMessage.join(':') + ' ' + errorCodeMessage.join(':')\n  }\n  return err\n}\n\nde.biancoroyal.bacnet.core.errorCodeToString = function (errorCodeId) {\n  if (de.biancoroyal.bacnet.core.errorCodeList.length < 1) {\n    de.biancoroyal.bacnet.core.initCodeLists()\n  }\n  let listEntry, entry\n  for (listEntry of de.biancoroyal.bacnet.core.errorCodeList) {\n    if (parseInt(listEntry.typeValue) === parseInt(errorCodeId)) {\n      de.biancoroyal.bacnet.core.detailDebugLog(listEntry.typeValue + ' --> ' + listEntry.label)\n      entry = listEntry\n    }\n  }\n  return (entry) ? entry.label : errorCodeId\n}\n\nde.biancoroyal.bacnet.core.errorClassToString = function (errorClassId) {\n  if (de.biancoroyal.bacnet.core.errorClassList.length < 1) {\n    de.biancoroyal.bacnet.core.initCodeLists()\n  }\n  let listEntry, entry\n  for (listEntry of de.biancoroyal.bacnet.core.errorClassList) {\n    if (parseInt(listEntry.typeValue) === parseInt(errorClassId)) {\n      de.biancoroyal.bacnet.core.detailDebugLog(listEntry.typeValue + ' --> ' + listEntry.label)\n      entry = listEntry\n    }\n  }\n  return (entry) ? entry.label : errorClassId\n}\n\nmodule.exports = de.biancoroyal.bacnet.core\n"]}