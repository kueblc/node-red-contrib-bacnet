{"version":3,"sources":["core/bacnet-core.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","i","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","s","F","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","de","biancoroyal","bacnet","core","internalDebugLog","require","specialDebugLog","errorCodeList","errorClassList","initCodeLists","listCodeEntry","_step","BACnet","_","detailDebugLog","invert","_iterator","push","typeValue","label","sortBy","ErrorCode","listClassEntry","_step2","toArray","_iterator2","invertedErrorCodeList","invertedErrorClassList","translateErrorMessage","message","messageParts","split","errorCodeMessage","errorClassMessage","errorCodeToString","join","errorCodeId","_step3","parseInt","listEntry","_iterator3","errorClassToString","entry","_step4","_iterator4","errorClassId","module","exports"],"mappings":"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","file":"../../core/bacnet-core.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nvar de = de || { biancoroyal: { bacnet: { core: {} } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.internalDebugLog = de.biancoroyal.bacnet.core.internalDebugLog || require('debug')('bacnet:nodered:core') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.detailDebugLog = de.biancoroyal.bacnet.core.detailDebugLog || require('debug')('bacnet:nodered:core:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.specialDebugLog = de.biancoroyal.bacnet.core.specialDebugLog || require('debug')('bacnet:nodered:core:special') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.errorCodeList = de.biancoroyal.bacnet.core.errorCodeList || [] // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.errorClassList = de.biancoroyal.bacnet.core.errorClassList || [] // eslint-disable-line no-use-before-define\n\nde.biancoroyal.bacnet.core.initCodeLists = function () {\n  const BACnet = require('node-bacnet')\n  const _ = require('underscore')\n\n  const errorCodeList = BACnet.enum.ErrorCode\n  const invertedErrorCodeList = _.toArray(_.invert(errorCodeList))\n  de.biancoroyal.bacnet.core.errorCodeList = []\n\n  let listCodeEntry\n  for (listCodeEntry of invertedErrorCodeList) {\n    de.biancoroyal.bacnet.core.errorCodeList.push({ typeValue: errorCodeList[listCodeEntry], label: listCodeEntry })\n  }\n  _.sortBy(de.biancoroyal.bacnet.core.errorCodeList, 'typeValue')\n\n  const errorClassList = BACnet.enum.ErrorClass\n  const invertedErrorClassList = _.toArray(_.invert(errorClassList))\n  de.biancoroyal.bacnet.core.errorClassList = []\n\n  let listClassEntry\n  for (listClassEntry of invertedErrorClassList) {\n    de.biancoroyal.bacnet.core.errorClassList.push({ typeValue: errorClassList[listClassEntry], label: listClassEntry })\n  }\n  _.sortBy(de.biancoroyal.bacnet.core.errorClassList, 'typeValue')\n\n  de.biancoroyal.bacnet.core.internalDebugLog('List init done with ' +\n    de.biancoroyal.bacnet.core.errorClassList.length + ' class errors and ' +\n    de.biancoroyal.bacnet.core.errorCodeList.length + ' code errors')\n}\n\nde.biancoroyal.bacnet.core.translateErrorMessage = function (err) {\n  const message = err.message\n  const messageParts = message.split('-')\n  if (messageParts.length === 3) {\n    const errorClassMessage = messageParts[1].split(':')\n    const errorCodeMessage = messageParts[2].split(':')\n\n    de.biancoroyal.bacnet.core.internalDebugLog(errorClassMessage)\n    de.biancoroyal.bacnet.core.internalDebugLog(errorCodeMessage)\n\n    errorClassMessage[1] = de.biancoroyal.bacnet.core.errorClassToString(errorClassMessage[1])\n    errorCodeMessage[1] = de.biancoroyal.bacnet.core.errorCodeToString(errorCodeMessage[1])\n\n    err.message = message + ' ' + errorClassMessage.join(':') + ' ' + errorCodeMessage.join(':')\n  }\n  return err\n}\n\nde.biancoroyal.bacnet.core.errorCodeToString = function (errorCodeId) {\n  if (de.biancoroyal.bacnet.core.errorCodeList.length < 1) {\n    de.biancoroyal.bacnet.core.initCodeLists()\n  }\n  let listEntry, entry\n  for (listEntry of de.biancoroyal.bacnet.core.errorCodeList) {\n    if (parseInt(listEntry.typeValue) === parseInt(errorCodeId)) {\n      de.biancoroyal.bacnet.core.detailDebugLog(listEntry.typeValue + ' --> ' + listEntry.label)\n      entry = listEntry\n    }\n  }\n  return (entry) ? entry.label : errorCodeId\n}\n\nde.biancoroyal.bacnet.core.errorClassToString = function (errorClassId) {\n  if (de.biancoroyal.bacnet.core.errorClassList.length < 1) {\n    de.biancoroyal.bacnet.core.initCodeLists()\n  }\n  let listEntry, entry\n  for (listEntry of de.biancoroyal.bacnet.core.errorClassList) {\n    if (parseInt(listEntry.typeValue) === parseInt(errorClassId)) {\n      de.biancoroyal.bacnet.core.detailDebugLog(listEntry.typeValue + ' --> ' + listEntry.label)\n      entry = listEntry\n    }\n  }\n  return (entry) ? entry.label : errorClassId\n}\n\nmodule.exports = de.biancoroyal.bacnet.core\n"]}