{"version":3,"sources":["bacnet-write.js"],"names":["module","exports","RED","bacnetCore","require","BACnet","_","nodes","registerType","config","createNode","this","name","parseInt","objectType","valueTag","valueValue","propertyId","priority","BACnetWrite","multipleWrite","instance","objectInstance","getNode","instanceAddress","deviceIPAddress","device","deviceAddress","connector","node","status","fill","shape","text","options","msg","Error","internalDebugLog","payload","item","objectId","values","JSON","stringify","e","client","writePropertyMultiple","err","value","translatedError","translateErrorMessage","error","send","type","defaultValues","writeProperty","input","httpAdmin","get","auth","needsPermission","req","res","typelistEntry","_step","resultTypeList","ApplicationTag","_iterator","_createForOfIteratorHelper","toArray","invert","typeList","s","n","done","push","typeValue","label","f","_step2","PropertyIdentifier","_iterator2","invertedTypeList","_step3","ObjectType","_iterator3"],"mappings":"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","file":"../bacnet-write.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n  const BACnet = require('node-bacnet')\n  const _ = require('underscore')\n\n  function BACnetWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.objectType = parseInt(config.objectType)\n    this.valueTag = parseInt(config.valueTag)\n    this.valueValue = config.valueValue\n    this.propertyId = parseInt(config.propertyId)\n    this.priority = parseInt(config.priority)\n\n    this.multipleWrite = config.multipleWrite\n\n    if (config.instance) {\n      this.instance = RED.nodes.getNode(config.instance)\n      this.objectInstance = this.instance.instanceAddress\n    } else {\n      this.objectInstance = 0\n    }\n\n    if (config.device) {\n      this.device = RED.nodes.getNode(config.device)\n      this.deviceIPAddress = this.device.deviceAddress\n    } else {\n      this.deviceIPAddress = '127.0.0.1'\n    }\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    const node = this\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Write'), msg)\n        return\n      }\n\n      node.priority = (node.priority < 1 ? 16 : node.priority)\n      node.priority = (node.priority > 16 ? 16 : node.priority)\n\n      const options = msg.payload.options || { priority: node.priority }\n\n      if (node.multipleWrite) {\n        bacnetCore.internalDebugLog('Multiple Write')\n\n        if (!msg.payload.values || !msg.payload.values[0].values) {\n          node.error(new Error('msg.payload.values missing or invalid array for multiple write'), msg)\n          return\n        }\n\n        msg.payload.values.forEach(function (item) {\n          if (!item.objectId) {\n            item.objectId = {\n              type: node.objectType,\n              instance: parseInt(node.objectInstance)\n            }\n          }\n        })\n\n        try {\n          bacnetCore.internalDebugLog('writeProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('writeProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('writePropertyMultiple msg.payload.values: ' + JSON.stringify(msg.payload.values))\n        } catch (e) {\n          bacnetCore.internalDebugLog('writePropertyMultiple error: ' + e)\n        }\n\n        node.connector.client.writePropertyMultiple(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.values,\n          options,\n          function (err, value) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = value\n              node.send(msg)\n            }\n          })\n      } else {\n        bacnetCore.internalDebugLog('Write')\n\n        if (msg.payload.values && !msg.payload.values[0]) {\n          node.error(new Error('invalid msg.payload.values array for write'), msg)\n          return\n        }\n\n        const objectId = {\n          type: parseInt(node.objectType),\n          instance: parseInt(node.objectInstance)\n        }\n\n        const defaultValues = [{\n          type: parseInt(node.valueTag),\n          value: node.valueValue\n        }]\n\n        try {\n          bacnetCore.internalDebugLog('writeProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('writeProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('writeProperty default objectId: ' + JSON.stringify(objectId))\n          bacnetCore.internalDebugLog('writeProperty default values: ' + JSON.stringify(defaultValues))\n          bacnetCore.internalDebugLog('writeProperty msg.payload.values: ' + JSON.stringify(msg.payload.values))\n          bacnetCore.internalDebugLog('writeProperty node.propertyId: ' + node.propertyId)\n          bacnetCore.internalDebugLog('writeProperty msg.payload.propertyId: ' + msg.payload.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('writeProperty error: ' + e)\n        }\n\n        node.connector.client.writeProperty(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.objectId || objectId,\n          parseInt(msg.payload.propertyId) || parseInt(node.propertyId) || 85,\n          msg.payload.values || defaultValues,\n          options,\n          function (err, value) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = value || 'write done'\n              node.send(msg)\n            }\n          })\n      }\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Write', BACnetWrite)\n\n  RED.httpAdmin.get('/bacnet/ApplicationTags', RED.auth.needsPermission('bacnet.CMD.write'), function (req, res) {\n    const typeList = BACnet.enum.ApplicationTag\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: parseInt(typeList[typelistEntry]) || 0, label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/PropertyIds', RED.auth.needsPermission('bacnet.CMD.write'), function (req, res) {\n    const typeList = BACnet.enum.PropertyIdentifier\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: parseInt(typeList[typelistEntry]) || 0, label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/ObjectTypes', RED.auth.needsPermission('bacnet.CMD.write'), function (req, res) {\n    const typeList = BACnet.enum.ObjectType\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: parseInt(typeList[typelistEntry]) || 0, label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}