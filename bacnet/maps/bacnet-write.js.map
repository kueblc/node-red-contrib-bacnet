{"version":3,"sources":["bacnet-write.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","i","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","s","F","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","module","exports","bacnetCore","BACnet","RED","httpAdmin","config","nodes","require","this","createNode","parseInt","objectType","valueTag","valueValue","propertyId","multipleWrite","instance","objectInstance","getNode","instanceAddress","deviceIPAddress","device","deviceAddress","connector","fill","server","node","on","msg","text","priority","internalDebugLog","error","payload","values","item","forEach","objectId","type","writePropertyMultiple","translatedError","JSON","stringify","client","options","Error","send","defaultValues","writeProperty","typeList","invertedTypeList","invert","resultTypeList","typelistEntry","_iterator","_step","translateErrorMessage","push","typeValue","input","needsPermission","req","res","_iterator2","ApplicationTag","_","toArray","_step2","label","json","get","auth","PropertyIdentifier","_step3","ObjectType","_iterator3"],"mappings":"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","file":"../bacnet-write.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n  const BACnet = require('node-bacnet')\n  const _ = require('underscore')\n\n  function BACnetWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.objectType = parseInt(config.objectType)\n    this.valueTag = parseInt(config.valueTag)\n    this.valueValue = config.valueValue\n    this.propertyId = parseInt(config.propertyId)\n    this.priority = parseInt(config.priority)\n\n    this.multipleWrite = config.multipleWrite\n\n    if (config.instance) {\n      this.instance = RED.nodes.getNode(config.instance)\n      this.objectInstance = this.instance.instanceAddress\n    } else {\n      this.objectInstance = 0\n    }\n\n    if (config.device) {\n      this.device = RED.nodes.getNode(config.device)\n      this.deviceIPAddress = this.device.deviceAddress\n    } else {\n      this.deviceIPAddress = '127.0.0.1'\n    }\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    const node = this\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Write'), msg)\n        return\n      }\n\n      node.priority = (node.priority < 1 ? 16 : node.priority)\n      node.priority = (node.priority > 16 ? 16 : node.priority)\n\n      const options = msg.payload.options || { priority: node.priority }\n\n      if (node.multipleWrite) {\n        bacnetCore.internalDebugLog('Multiple Write')\n\n        if (!msg.payload.values || !msg.payload.values[0].values) {\n          node.error(new Error('msg.payload.values missing or invalid array for multiple write'), msg)\n          return\n        }\n\n        msg.payload.values.forEach(function (item) {\n          if (!item.objectId) {\n            item.objectId = {\n              type: node.objectType,\n              instance: parseInt(node.objectInstance)\n            }\n          }\n        })\n\n        try {\n          bacnetCore.internalDebugLog('writeProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('writeProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('writePropertyMultiple msg.payload.values: ' + JSON.stringify(msg.payload.values))\n        } catch (e) {\n          bacnetCore.internalDebugLog('writePropertyMultiple error: ' + e)\n        }\n\n        node.connector.client.writePropertyMultiple(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.values,\n          options,\n          function (err, value) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = value\n              node.send(msg)\n            }\n          })\n      } else {\n        bacnetCore.internalDebugLog('Write')\n\n        if (msg.payload.values && !msg.payload.values[0]) {\n          node.error(new Error('invalid msg.payload.values array for write'), msg)\n          return\n        }\n\n        const objectId = {\n          type: parseInt(node.objectType),\n          instance: parseInt(node.objectInstance)\n        }\n\n        const defaultValues = [{\n          type: parseInt(node.valueTag),\n          value: node.valueValue\n        }]\n\n        try {\n          bacnetCore.internalDebugLog('writeProperty node.deviceIPAddress: ' + node.deviceIPAddress)\n          bacnetCore.internalDebugLog('writeProperty msg.payload.deviceIPAddress: ' + msg.payload.deviceIPAddress)\n          bacnetCore.internalDebugLog('writeProperty default objectId: ' + JSON.stringify(objectId))\n          bacnetCore.internalDebugLog('writeProperty default values: ' + JSON.stringify(defaultValues))\n          bacnetCore.internalDebugLog('writeProperty msg.payload.values: ' + JSON.stringify(msg.payload.values))\n          bacnetCore.internalDebugLog('writeProperty node.propertyId: ' + node.propertyId)\n          bacnetCore.internalDebugLog('writeProperty msg.payload.propertyId: ' + msg.payload.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('writeProperty error: ' + e)\n        }\n\n        node.connector.client.writeProperty(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.objectId || objectId,\n          parseInt(msg.payload.propertyId) || parseInt(node.propertyId) || 85,\n          msg.payload.values || defaultValues,\n          options,\n          function (err, value) {\n            if (err) {\n              const translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = value || 'write done'\n              node.send(msg)\n            }\n          })\n      }\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Write', BACnetWrite)\n\n  RED.httpAdmin.get('/bacnet/ApplicationTags', RED.auth.needsPermission('bacnet.CMD.write'), function (req, res) {\n    const typeList = BACnet.enum.ApplicationTag\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: parseInt(typeList[typelistEntry]) || 0, label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/PropertyIds', RED.auth.needsPermission('bacnet.CMD.write'), function (req, res) {\n    const typeList = BACnet.enum.PropertyIdentifier\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: parseInt(typeList[typelistEntry]) || 0, label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/ObjectTypes', RED.auth.needsPermission('bacnet.CMD.write'), function (req, res) {\n    const typeList = BACnet.enum.ObjectType\n    const invertedTypeList = _.toArray(_.invert(typeList))\n    const resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: parseInt(typeList[typelistEntry]) || 0, label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}