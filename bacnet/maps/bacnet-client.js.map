{"version":3,"sources":["bacnet-client.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","i","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","s","F","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","module","exports","bacnetCore","BACnet","RED","nodes","registerType","require","createNode","this","config","BACnetClient","adpuTimeout","port","parseInt","broadcastAddress","node","devices","nmap","setupClient","client","interface","on","device","cacheDeviceAddress","internalDebugLog","whoIs","net","error","payload","close","msg","send","whoIsExplicit","lowLimit","highLimit","address","cb","options","setTimeout","deviceId","header","sender","deviceAddress","_device$header$sender","adr","pendingResolution","_step","_iterator","pending","lastUpdated","Date","getDeviceAddressById","console","push","errorCb"],"mappings":"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","file":"../bacnet-client.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n  const BACnet = require('node-bacnet')\n\n  function BACnetClient (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.adpuTimeout = parseInt(config.adpuTimeout) || 6000\n    this.port = parseInt(config.port) || 47808\n    this.interface = config.interface || '0.0.0.0'\n    this.broadcastAddress = config.broadcastAddress || '0.0.0.255'\n\n    const node = this\n    node.devices = []\n    node.nmap = {}\n    node.pendingResolution = {}\n\n    function setupClient () {\n      node.client = new BACnet({ adpuTimeout: node.adpuTimeout, port: node.port, interface: node.interface, broadcastAddress: node.broadcastAddress })\n\n      node.client.on('iAm', (device) => {\n        node.devices.push(device)\n        bacnetCore.internalDebugLog('iAm Event', device)\n        node.cacheDeviceAddress(device)\n      })\n\n      node.client.on('timeout', function () {\n        bacnetCore.internalDebugLog('timeout')\n      })\n\n      node.client.whoIs({ net: 0xffff })\n\n      node.client.on('error', function (err) {\n        node.error(err, { payload: 'BACnet Client Error' })\n        node.client.close()\n        node.client = null\n        node.devices = []\n        setupClient()\n      })\n    }\n\n    setupClient()\n\n    node.on('input', function (msg) {\n      msg.devices = node.devices\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (node.client) {\n        node.client.close()\n        node.client = null\n      }\n      done()\n    })\n\n    node.whoIsExplicit = function (lowLimit, highLimit, address, cb) {\n      node.devices = []\n      const options = {\n        lowLimit,\n        highLimit\n      }\n      node.client.whoIs({ net: 0xffff, address }, options)\n      setTimeout(cb, 3000)\n    }\n\n    node.whoIs = function (cb) {\n      node.devices = []\n      node.client.whoIs({ net: 0xffff })\n      setTimeout(cb, 3000)\n    }\n\n    node.cacheDeviceAddress = function (device) {\n      const { deviceId } = device.payload\n      const { address, net, adr } = device.header.sender\n      const deviceAddress = {\n        address,\n        net,\n        adr,\n        lastUpdated: Date.now()\n      }\n      node.nmap[deviceId] = deviceAddress\n\n      if (deviceId in node.pendingResolution) {\n        const pending = node.pendingResolution[deviceId]\n        delete node.pendingResolution[deviceId]\n        for (const cb of pending) {\n          cb(deviceAddress)\n        }\n      }\n    }\n\n    node.getDeviceAddressById = function (deviceId, cb, errorCb) {\n      if (deviceId in node.nmap) {\n        const deviceAddress = node.nmap[deviceId]\n        cb(deviceAddress)\n      } else {\n        console.log('getDeviceAddressById cache miss', deviceId)\n        const pending = node.pendingResolution[deviceId] = node.pendingResolution[deviceId] || []\n        if (pending.push(cb) === 1) {\n          node.client.whoIs({ net: 0xffff }, {\n            lowLimit: deviceId,\n            highLimit: deviceId\n          })\n          setTimeout(function () {\n            if (deviceId in node.pendingResolution) {\n              console.error('getDeviceAddressById timeout', deviceId)\n              delete node.pendingResolution[deviceId]\n              errorCb && errorCb()\n            }\n          }, node.adpuTimeout)\n        }\n      }\n    }\n  }\n\n  RED.nodes.registerType('BACnet-Client', BACnetClient)\n}\n"]}