{"version":3,"sources":["bacnet-client.js"],"names":["module","exports","RED","bacnetCore","require","BACnet","nodes","registerType","config","createNode","this","name","adpuTimeout","port","parseInt","broadcastAddress","node","interface","nmap","on","device","pendingResolution","internalDebugLog","setupClient","client","err","cacheDeviceAddress","close","msg","devices","done","whoIsExplicit","lowLimit","highLimit","deviceIPAddress","cb","whoIs","setTimeout","deviceId","payload","header","sender","address","net","adr","lastUpdated","Date","now","pending","_iterator","s","_step","n","value","deviceAddress","console","log","push"],"mappings":"+oCASAA,OAAOC,QAAU,SAAUC,GACzB,IAAMC,EAAaC,QAAQ,sBACrBC,EAASD,QAAQ,eA4GvBF,EAAII,MA1BwCC,aAAA,gBAhF5C,SAAuBC,GACrBN,EAAII,MAAMG,WAAWC,KAAMF,GAL/BR,KAAOC,KAAPO,EAAiBG,KACfD,KAAMP,YAAaC,SAAQI,EAAAI,cAA3B,IAOEF,KAAKG,KAAOC,SAASN,EAAOK,OAAS,MANvCH,KAAA,UAAeN,EAAQ,WAAvB,UAQEM,KAAKK,iBAAmBP,EAAOO,kBAAoB,YALnDb,IAAII,EAAMG,KACVO,EAAKL,QAAOH,GACZQ,EAAKJ,KAAAA,GACLI,EAAKH,kBAAgBL,GAErB,SAAKO,IAELC,EAAMA,OAAN,IAAAX,EAAA,CAAAO,YAAAI,EAAAJ,YAAAC,KAAAG,EAAAH,KAAAI,UAAAD,EAAA,UAAAD,iBAAAC,EAAAD,mBAEAC,EAAKE,OAALC,GAAA,MAAA,SAAAC,GACIJ,EAACK,QAAAA,KAALD,GAOIjB,EAAWmB,iBAAiB,YAAaF,GAL7CJ,EAASO,mBAAeH,KAStBJ,EAR0DH,OAAUM,GAACN,UAA5C,WAAkDV,EAAAmB,iBAAe,aAE1FN,EAAKQ,OAAOL,QAYZH,EAVEb,OAAUgB,GAACG,QAAAA,SAAiBG,GAC5BT,EAAKU,MAAAA,EAAAA,CAAAA,QAAmBN,wBAH1BJ,EAAAQ,OAAAG,QAMAX,EAAKQ,OAAU,KACbrB,EAAAA,QAAWmB,GADbC,MAeFA,GAEAP,EATIA,GAAI,QAAQW,SAAZC,GAUFA,EATEZ,QAAAA,EAAca,QAUhBb,EATEA,KAAKa,KAGRb,EAAAG,GAAA,QAAA,SAAAW,GAUKd,EAAKQ,SARXD,EAAAA,OAAWI,QAEPX,EAAIQ,OAAS,MAEfR,MAWFA,EAPEe,cAAiB,SAAAC,EAAAC,EAAAC,EAAAC,GAQjBnB,EAPEA,QAAYW,GAadX,EAAKQ,OAAOY,MAZI,CACfJ,SAAAA,EAQCC,UAAAA,EAPFH,gBAAAA,IAGFd,WAAKe,EAAAA,MAWLf,EARIgB,MAAQ,SADMG,GAUhBnB,EAREiB,QAAAA,GASFjB,EAREkB,OAAAA,QAHcG,WAAhBF,EAAA,MAODnB,EATDU,mBAAA,SAAAN,GAkBE,IAAQkB,EAAalB,EAAOmB,QAApBD,SAPVtB,EAA2BI,EAAAoB,OAAAC,OACpBZ,EAAL,CACAb,QAFFA,EAAA0B,QAGEL,IAHFrB,EAAa2B,IAAbC,IAAA5B,EAAuBmB,IAanBU,YAAaC,KAAKC,OALpB,GADA/B,EAAQsB,KAAAA,GAAoBC,EACpBG,KAAR1B,EAAAK,kBAAQqB,CAAR,IAAQA,EAARM,EAAAhC,EAAAK,kBAAAiB,GAAQI,UAAR1B,EAAAK,kBAAsBuB,GAAdF,2BACWM,IADXN,IACR,IAAAO,EAAAC,MAAAC,EAAAF,EAAAG,KAAAtB,OACEY,EADoBS,EAAAE,OACpBX,GAFMA,MAAAA,GAAAA,EAAAA,EAAAA,GAAAA,QAAAA,EAAAA,OAkBV1B,EAXEA,qBAAsBsC,SAAtBhB,EAAAH,GAYIG,KAAYtB,EAAKE,KATnBiB,EADmBd,EAAAA,KAAAA,KAcnBkC,QAAQC,IAAI,kCAAmClB,GAdT,KAAAtB,EAAAK,kBAAAiB,GAAAtB,EAAAK,kBAAAiB,IAAA,IAAAmB,KAAAtB,IAiBpCnB,EAAKQ,OAAOY,MAAM,CAjBkBJ,SAAAM,EAGtCL,UAAAK","file":"../bacnet-client.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  const bacnetCore = require('./core/bacnet-core')\n  const BACnet = require('node-bacnet')\n\n  function BACnetClient (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.adpuTimeout = parseInt(config.adpuTimeout) || 6000\n    this.port = parseInt(config.port) || 47808\n    this.interface = config.interface || '0.0.0.0'\n    this.broadcastAddress = config.broadcastAddress || '0.0.0.255'\n\n    const node = this\n    node.devices = []\n    node.nmap = {}\n    node.pendingResolution = {}\n\n    function setupClient () {\n      node.client = new BACnet({ adpuTimeout: node.adpuTimeout, port: node.port, interface: node.interface, broadcastAddress: node.broadcastAddress })\n\n      node.client.on('iAm', (device) => {\n        node.devices.push(device)\n        bacnetCore.internalDebugLog('iAm Event', device)\n        node.cacheDeviceAddress(device)\n      })\n\n      node.client.on('timeout', function () {\n        bacnetCore.internalDebugLog('timeout')\n      })\n\n      node.client.whoIs()\n\n      node.client.on('error', function (err) {\n        node.error(err, { payload: 'BACnet Client Error' })\n        node.client.close()\n        node.client = null\n        node.devices = []\n        setupClient()\n      })\n    }\n\n    setupClient()\n\n    node.on('input', function (msg) {\n      msg.devices = node.devices\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (node.client) {\n        node.client.close()\n        node.client = null\n      }\n      done()\n    })\n\n    node.whoIsExplicit = function (lowLimit, highLimit, deviceIPAddress, cb) {\n      node.devices = []\n      const options = {\n        lowLimit,\n        highLimit,\n        deviceIPAddress\n      }\n      node.client.whoIs(options)\n      setTimeout(cb, 3000)\n    }\n\n    node.whoIs = function (cb) {\n      node.devices = []\n      node.client.whoIs()\n      setTimeout(cb, 3000)\n    }\n\n    node.cacheDeviceAddress = function (device) {\n      const { deviceId } = device.payload\n      const { address, net, adr } = device.header.sender\n      const deviceAddress = {\n        address,\n        net,\n        adr,\n        lastUpdated: Date.now()\n      }\n      node.nmap[deviceId] = deviceAddress\n\n      if (deviceId in node.pendingResolution) {\n        const pending = node.pendingResolution[deviceId]\n        delete node.pendingResolution[deviceId]\n        for (const cb of pending) {\n          cb(deviceAddress)\n        }\n      }\n    }\n\n    node.getDeviceAddressById = function (deviceId, cb) {\n      if (deviceId in node.nmap) {\n        const deviceAddress = node.nmap[deviceId]\n        cb(deviceAddress)\n      } else {\n        console.log('getDeviceAddressById cache miss', deviceId)\n        const pending = node.pendingResolution[deviceId] = node.pendingResolution[deviceId] || []\n        if (pending.push(cb) === 1) {\n          node.client.whoIs({\n            lowLimit: deviceId,\n            highLimit: deviceId\n          })\n        }\n      }\n    }\n  }\n\n  RED.nodes.registerType('BACnet-Client', BACnetClient)\n}\n"]}